/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

    -Purple Effects Plugin - Mark Matamoros Fall 2015
    -This is a guitar (bass and electric) effects plugin with tremolo, two gain stages, and stereo width.
    -Referenced files/sites:
        -++delay.jucer - Tom Erbe
        -stereo width: http://musicdsp.org/showArchiveComment.php?ArchiveID=173
 
  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
MmAssig3AudioProcessorEditor::MmAssig3AudioProcessorEditor (MmAssig3AudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be. -window size
    
    setSize (730, 103);
    
    //gainOne slider parameters
    gainOne.setName("Gain One");
    gainOne.setSliderStyle (Slider::RotaryVerticalDrag);
    gainOne.setSize(60, 60);
    gainOne.setColour(Slider::rotarySliderFillColourId, Colours::black);
    gainOne.setColour(Slider::rotarySliderOutlineColourId, Colours::black);
    gainOne.setRange(0.0, 1.0, 1.0/127.0);
    gainOne.setTextBoxStyle (Slider::NoTextBox, false, 90, 0);
    gainOne.setValue(0.0);
    
    //gainTwo slider parameters
    gainTwo.setName("Gain Two");
    gainTwo.setSliderStyle (Slider::RotaryVerticalDrag);
    gainTwo.setSize(60, 60);
    gainTwo.setColour(Slider::rotarySliderFillColourId, Colours::black);
    gainTwo.setColour(Slider::rotarySliderOutlineColourId, Colours::black);
    gainTwo.setRange(0.0, 1.0, 1.0/127.0);
    gainTwo.setTextBoxStyle (Slider::NoTextBox, false, 90, 0);
    gainTwo.setValue(0.0);
    
    //rate slider parameters
    rate.setName("LFO Rate");
    rate.setSliderStyle (Slider::RotaryVerticalDrag);
    rate.setSize(60, 60);
    rate.setColour(Slider::rotarySliderFillColourId, Colours::black);
    rate.setColour(Slider::rotarySliderOutlineColourId, Colours::black);
    rate.setRange(0.0, 1.0, 1.0/127.0);
    rate.setTextBoxStyle (Slider::NoTextBox, false, 90, 0);
    rate.setValue(0.0);
    
    //depth slider parameters
    lfoDepth.setName("LFO Depth");
    lfoDepth.setSliderStyle (Slider::RotaryVerticalDrag);
    lfoDepth.setSize(60, 60);
    lfoDepth.setColour(Slider::rotarySliderFillColourId, Colours::black);
    lfoDepth.setColour(Slider::rotarySliderOutlineColourId, Colours::black);
    lfoDepth.setRange(0.0, 1.0, 1.0/127.0);
    lfoDepth.setTextBoxStyle (Slider::NoTextBox, false, 90, 0);
    lfoDepth.setValue(0.0);
    
    //stereo slider parameters
    stereoWidth.setName("Width");
    stereoWidth.setSliderStyle (Slider::RotaryVerticalDrag);
    stereoWidth.setSize(60, 60);
    stereoWidth.setColour(Slider::rotarySliderFillColourId, Colours::black);
    stereoWidth.setColour(Slider::rotarySliderOutlineColourId, Colours::black);
    stereoWidth.setRange(0.0, 1.0, 1.0/127.0);
    stereoWidth.setTextBoxStyle (Slider::NoTextBox, false, 90, 0);
    stereoWidth.setValue(0.0);
    
    //input slider parameters
    input.setName("Input");
    input.setSliderStyle (Slider::RotaryVerticalDrag);
    input.setSize(60, 60);
    input.setColour(Slider::rotarySliderFillColourId, Colours::black);
    input.setColour(Slider::rotarySliderOutlineColourId, Colours::black);
    input.setRange(0.0, 1.0, 1.0/127.0);
    input.setTextBoxStyle (Slider::NoTextBox, false, 90, 0);
    input.setValue(0.0);
    
    //output slider parameters
    output.setName("Output");
    output.setSliderStyle (Slider::RotaryVerticalDrag);
    output.setSize(60, 60);
    output.setColour(Slider::rotarySliderFillColourId, Colours::black);
    output.setColour(Slider::rotarySliderOutlineColourId, Colours::black);
    output.setRange(0.0, 1.0, 1.0/127.0);
    output.setTextBoxStyle (Slider::NoTextBox, false, 90, 0);
    output.setValue(0.0);
    
    //add sliders to the editor
    addAndMakeVisible (&gainOne);
    addAndMakeVisible (&gainTwo);
    addAndMakeVisible (&rate);
    addAndMakeVisible (&lfoDepth);
    addAndMakeVisible (&stereoWidth);
    addAndMakeVisible (&input);
    addAndMakeVisible (&output);

    //add listeners to the sliders
    gainOne.addListener(this);
    gainTwo.addListener(this);
    rate.addListener(this);
    lfoDepth.addListener(this);
    stereoWidth.addListener(this);
    input.addListener(this);
    output.addListener(this);
    
    startTimer(30);
}

//throw slider values to dsp variables
void MmAssig3AudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    if (slider == &gainOne)
    {
        processor.gain1 = gainOne.getValue();
        processor.setParameterNotifyingHost(0, gainOne.getValue());
    }
    
    if (slider == &gainTwo)
    {
        processor.gain2 = gainTwo.getValue();
        processor.setParameterNotifyingHost(1, gainTwo.getValue());
    }
    
    if (slider == &rate)
    {
        processor.rateLFO = rate.getValue();
        processor.setParameterNotifyingHost(2, rate.getValue());
    }
    
    if (slider == &lfoDepth)
    {
        processor.depth = lfoDepth.getValue();
        processor.setParameterNotifyingHost(3, lfoDepth.getValue());
    }
    
    if (slider == &stereoWidth)
    {
        processor.width = stereoWidth.getValue();
        processor.setParameterNotifyingHost(4, stereoWidth.getValue());
    }
    
    if (slider == &input)
    {
        processor.inPut = input.getValue();
        processor.setParameterNotifyingHost(5, input.getValue());
    }
    
    if (slider == &output)
    {
        processor.outPut = output.getValue();
        processor.setParameterNotifyingHost(6, output.getValue());
    }
}


MmAssig3AudioProcessorEditor::~MmAssig3AudioProcessorEditor()
{
}

//==============================================================================
void MmAssig3AudioProcessorEditor::paint (Graphics& g)
{
    //window background color
    g.fillAll (Colour (0xffebd1ff));;

    //text color
    g.setColour (Colour (0xffffffff));
    
    //text font size
    g.setFont (12.8f);
    
    g.setOpacity(0.6f);
    
    //rectangles - only strokes
    g.drawRoundedRectangle(5, 5, 80, 93, 0, 1);
    g.drawRoundedRectangle(91, 5, 150, 93, 0, 1);
    g.drawRoundedRectangle(247, 5, 150, 93, 0, 1);
    g.drawRoundedRectangle(403, 5, 80, 93, 0, 1);
    g.drawRoundedRectangle(489, 5, 80, 93, 0, 1);
    g.drawRoundedRectangle(575, 5, 150, 93, 0, 1);
    
    //rectangles - filled with solid color
    g.setColour (Colour (0xffebd1ff));
    g.fillRect(15, 0, 60, 103);
    g.fillRect(101, 0, 130, 103);
    g.fillRect(257, 0, 130, 103);
    g.fillRect(413, 0, 60, 103);
    g.fillRect(499, 0, 60, 103);
    g.fillRect(585, 0, 130, 103);
    
    g.setColour (Colour (0xff000000));

    //add parameter labels
    g.drawFittedText ("GAIN 1", 269, 75, getWidth(), getHeight(), Justification::topLeft, 1);
    g.drawFittedText ("GAIN 2", 339, 75, getWidth(), getHeight(), Justification::topLeft, 1);
    g.drawFittedText ("AM RATE", 108, 75, getWidth(), getHeight(), Justification::topLeft, 1);
    g.drawFittedText ("DEPTH", 183, 75, getWidth(), getHeight(), Justification::topLeft, 1);
    g.drawFittedText ("WIDTH", 426, 75, getWidth(), getHeight(), Justification::topLeft, 1);
    g.drawFittedText ("INPUT", 30, 75, getWidth(), getHeight(), Justification::topLeft, 1);
    g.drawFittedText ("OUTPUT", 508, 75, getWidth(), getHeight(), Justification::topLeft, 1);
    
    g.setFont (40.0f);
    g.setColour (Colour (0xff000000));
    g.drawFittedText ("PURPLE", 590, 10, getWidth(), getHeight(), Justification::topLeft, 1);
    
    g.setFont (12.0f);
    g.drawFittedText ("Tremolo.Distortion.", 603, 46, getWidth(), getHeight(), Justification::topLeft, 1);
    g.drawFittedText ("StereoEnhancer.", 612, 58, getWidth(), getHeight(), Justification::topLeft, 1);
    
    g.setFont (8.0f);
    g.drawFittedText ("MarkMatamoros. V. 1.0", 614, 78, getWidth(), getHeight(), Justification::topLeft, 1);

}

void MmAssig3AudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    
    //slider layout
    gainOne.setBounds(257, 15, 20, getHeight() - 60);
    gainTwo.setBounds(327, 15, 20, getHeight() - 60);
    rate.setBounds(101, 15, 20, getHeight() - 60);
    lfoDepth.setBounds(171, 15, 20, getHeight() - 60);
    stereoWidth.setBounds(413, 15, 20, getHeight() - 60);
    input.setBounds(15, 15, 20, getHeight() - 60);
    output.setBounds(499, 15, 20, getHeight() - 60);
}

//adjust slider graphics to values that associate with their according dsp variables
void MmAssig3AudioProcessorEditor::timerCallback()
{
    MmAssig3AudioProcessor* ourProcessor = getProcessor();
    
    if(gainOne.getValue() != ourProcessor->getParameter(0))
    {
        gainOne.setValue(ourProcessor->getParameter(0), dontSendNotification);
    }
    
    if(gainTwo.getValue() != ourProcessor->getParameter(1))
    {
        gainTwo.setValue(ourProcessor->getParameter(1), dontSendNotification);
    }
    
    if(rate.getValue() != ourProcessor->getParameter(2))
    {
        rate.setValue(ourProcessor->getParameter(2), dontSendNotification);
    }
    
    if(lfoDepth.getValue() != ourProcessor->getParameter(3))
    {
        lfoDepth.setValue(ourProcessor->getParameter(3), dontSendNotification);
    }
    
    if(stereoWidth.getValue() != ourProcessor->getParameter(4))
    {
        stereoWidth.setValue(ourProcessor->getParameter(4), dontSendNotification);
    }
    
    if(input.getValue() != ourProcessor->getParameter(5))
    {
        input.setValue(ourProcessor->getParameter(5), dontSendNotification);
    }
    
    if(output.getValue() != ourProcessor->getParameter(6))
    {
        output.setValue(ourProcessor->getParameter(6), dontSendNotification);
    }
}